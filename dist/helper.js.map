{"version":3,"file":"helper.js","sourceRoot":"","sources":["../src/helper.ts"],"names":[],"mappings":";;AAAA,0DAAiD;AAEjD,MAAa,MAAM;IAKf,gBAAwB,CAAC;IAGlB,MAAM,CAAC,YAAY,CAAC,KAAU;QAEjC,IAAI,KAAK,IAAI,IAAI;YACb,OAAO,IAAI,CAAC;QAEhB,IAAI,OAAO,CAAC,KAAK,CAAC,KAAK,SAAS;YAC5B,OAAO,KAAK,CAAC;QAEjB,MAAM,MAAM,GAAY,KAAK,CAAC,QAAQ,EAAG,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAE/D,IAAI,MAAM,KAAK,MAAM;YACjB,OAAO,IAAI,CAAC;QAEhB,IAAI,MAAM,KAAK,OAAO;YAClB,OAAO,KAAK,CAAC;QAEjB,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,MAAM,CAAC,WAAW,CAAC,KAAU;QAEhC,IAAI,KAAK,IAAI,IAAI;YACb,OAAO,IAAI,CAAC;QAEhB,IAAI,OAAO,CAAC,KAAK,CAAC,KAAK,QAAQ;YAC3B,OAAO,KAAK,CAAC;QAEjB,MAAM,MAAM,GAAY,KAAK,CAAC,QAAQ,EAAG,CAAC,IAAI,EAAE,CAAC;QAEjD,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC;YACnB,OAAO,IAAI,CAAC;QAEhB,MAAM,MAAM,GAAG,CAAC,MAAM,CAAC;QACvB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,QAAQ,CAAC,MAAM,CAAC;YAClC,OAAO,MAAM,CAAC;QAElB,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,MAAM,CAAC,gBAAgB,CAA4B,SAAiB;QAEvE,mBAAK,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC;QAEhE,OAAO,IAAI,CAAC,aAAa,CAAC,SAAS,CAAQ,CAAC;IAChD,CAAC;IAGO,MAAM,CAAC,aAAa,CAAC,QAAgB;QAEzC,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACnC,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC;YACjB,OAAO,EAAE,CAAC;QAEd,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACtB,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAO,QAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAQ,CAAC;QAExF,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAQ,QAAS,CAAC,CAAC,CAAC,CAAC,CAAQ,CAAC;IACzD,CAAC;IAEO,MAAM,CAAC,QAAQ,CAAC,KAAU;QAE9B,IAAI,KAAK,IAAI,IAAI;YACb,OAAO,KAAK,CAAC;QAEjB,KAAK,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,CAAC;QAChC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC;YAClB,OAAO,KAAK,CAAC;QACjB,IAAI,MAAM,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,CAAC;QACtC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAC;IAC9C,CAAC;CACJ;AA9ED,wBA8EC","sourcesContent":["import { given } from \"@nivinjoseph/n-defensive\";\n\nexport class Helper\n{\n    /**\n     * @static\n     */\n    private constructor() { }\n    \n    \n    public static parseBoolean(value: any): boolean | null\n    {\n        if (value == null)\n            return null;\n        \n        if (typeof (value) === \"boolean\")\n            return value;\n        \n        const strval = (<string>value.toString()).trim().toLowerCase();\n        \n        if (strval === \"true\")\n            return true;\n        \n        if (strval === \"false\")\n            return false;\n        \n        return null;\n    }\n    \n    public static parseNumber(value: any): number | null\n    {\n        if (value == null)\n            return null;\n\n        if (typeof (value) === \"number\")\n            return value;\n        \n        const strval = (<string>value.toString()).trim();\n        \n        if (strval.length === 0)\n            return null;\n        \n        const parsed = +strval;\n        if (!isNaN(parsed) && isFinite(parsed))\n            return parsed;\n        \n        return null;\n    }\n    \n    public static enumTypeToTuples<T extends string | number>(enumClass: object): ReadonlyArray<[string, T]>\n    {\n        given(enumClass, \"enumClass\").ensureHasValue().ensureIsObject();\n        \n        return this.getEnumTuples(enumClass) as any;\n    }\n    \n    \n    private static getEnumTuples(enumType: object): ReadonlyArray<[string, string | number]>\n    {\n        const keys = Object.keys(enumType);\n        if (keys.length === 0)\n            return [];\n\n        if (this.isNumber(keys[0]))\n            return keys.filter(t => this.isNumber(t)).map(t => [(<any>enumType)[t], +t]) as any;\n\n        return keys.map(t => [t, (<any>enumType)[t]]) as any;\n    }\n    \n    private static isNumber(value: any): boolean\n    {\n        if (value == null)\n            return false;\n\n        value = value.toString().trim();\n        if (value.length === 0)\n            return false;\n        let parsed = +value.toString().trim();\n        return !isNaN(parsed) && isFinite(parsed);\n    }\n}"]}